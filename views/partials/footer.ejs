
<div class="social-wrapper">
    <a href="#" class="social-icon">
        <i class="fa-brands fa-facebook-f"></i>
    </a>
    <a href="#" class="social-icon">
        <i class="fa-brands fa-instagram"></i>
    </a>
    <a href="#" class="social-icon">
        <i class="fa-brands fa-linkedin-in"></i>
    </a>

    <div class="ai-logo">
        <a href="/chatbot">
        <div class="ai-logo-inner">
            <div class="ai-logo-eye left"></div>
            <div class="ai-logo-eye right"></div>
            <div class="ai-logo-mouth"></div>
        </div>
    </a>
    </div>
</div>


    

<script type="module" src="/js/gsap.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script> 

<script>
    // Initialize Swiper
    const swiper = new Swiper('.swiper-container', {
        slidesPerView: 'auto',
        centeredSlides: true,
        spaceBetween: 30,
        loop: true,
        speed: 8000,
        autoplay: {
            delay: 1,
            disableOnInteraction: false,
        },
        breakpoints: {
            320: { slidesPerView: 1.2 },
            640: { slidesPerView: 2.2 },
            1024: { slidesPerView: 3.2 },
            1440: { slidesPerView: 4.2 }
        }
    });

    // Add hover effect
    document.querySelectorAll('.swiper-slide').forEach(slide => {
        slide.addEventListener('mouseenter', () => {
            swiper.autoplay.stop();
        });
        slide.addEventListener('mouseleave', () => {
            swiper.autoplay.start();
        });
    });


    console.log("Script is loaded and running!");
        // Range input styling
        const ratingInput = document.getElementById('rating');
if (ratingInput) {
    const stars = document.querySelectorAll('.rating-stars .fa-star');
    ratingInput.addEventListener('input', (e) => {
        const value = e.target.value;
        stars.forEach((star, index) => {
            star.style.color = index < value ? '#ffd700' : '#ddd';
        });
    });
} else {
    console.log("ratingInput element not found");
}


// messages

console.log("Script is loaded !");
        document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM fully loaded and parsed!"); // Debugging

    // Hide the review message after 3 seconds
    setTimeout(() => {
        const msg = document.querySelector('#review-message'); // Target the specific message
        console.log("Message Element:", msg); // Debugging
        if (msg) {
            msg.style.display = 'none';
            console.log("Message hidden successfully");
        } else {
            console.log("Message element not found");
        }
    }, 3000);

    // Remove the 'message' query parameter from the URL
    if (window.location.search.includes('message=')) {
        const url = new URL(window.location);
        url.searchParams.delete('message');
        window.history.replaceState({}, document.title, url.pathname);
    }
});




        // Form validation
        (() => {
            'use strict'
            const forms = document.querySelectorAll('.needs-validation')
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()


        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const clearChatButton = document.getElementById('clearChat');

        // Function to append a message to the chat
        function appendMessage(text, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', sender);
            messageElement.textContent = text;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight; // Auto-scroll to the bottom
        }

        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function sendMessage(message) {
            let sessionId = localStorage.getItem('dialogflowSessionId');
            if (!sessionId) {
                sessionId = generateUUID();
                localStorage.setItem('dialogflowSessionId', sessionId);
                console.log("New session ID generated:", sessionId); // For debugging
            } else {
                console.log("Using existing session ID:", sessionId); // For debugging
            }

            fetch('/chat', { // Replace '/chat' with the actual endpoint of your backend if different
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message, sessionId: sessionId }),
            })
            .then(response => response.json())
            .then(data => {
                // Display the bot's response
                appendMessage(data.reply, 'bot');
            })
            .catch(error => {
                console.error('Error sending message:', error);
                appendMessage('Error connecting to the server.', 'bot');
            });
        }

        // Function to clear the chat
        function clearChat() {
            messagesContainer.innerHTML = '';
            localStorage.removeItem('dialogflowSessionId');
            appendMessage("Hello! How can I help you today?", 'bot');
        }

        // Event listener for the send button
        sendButton.addEventListener('click', () => {
            const userMessage = messageInput.value.trim();
            if (!userMessage) return;

            // Display the user's message
            appendMessage(userMessage, 'user');
            messageInput.value = '';

            sendMessage(userMessage);
        });

        // Event listener for pressing Enter in the input field
        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                const userMessage = messageInput.value.trim();
                if (!userMessage) return;

                appendMessage(userMessage, 'user');
                messageInput.value = '';

                sendMessage(userMessage);
            }
        });

        // Event listener for clear chat button
        clearChatButton.addEventListener('click', clearChat);

        function initializeChat() {
            // Add welcome message if chat is empty
            if (messagesContainer.children.length === 0) {
                appendMessage("Hello! How can I help you today?", 'bot');
            }
        }

        // Call initializeChat when the page loads
        window.onload = initializeChat;

</script>
</body>
</html>