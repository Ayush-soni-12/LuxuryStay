<div class="social-wrapper">


</div>


<footer>
<div class="container">
    <div class="footer-container">
        <div class="footer-column">
            <h3>LuxuryStays</h3>
            <ul>
                <li><a href="#">About Us</a></li>
                <li><a href="#">Careers</a></li>
                <li><a href="#">Press</a></li>
                <li><a href="#">Policies</a></li>
                <li><a href="#">Help</a></li>
            </ul>
        </div>
        
        <div class="footer-column">
            <h3>Discover</h3>
            <ul>
                <li><a href="#">Trust & Safety</a></li>
                <li><a href="#">Travel Credit</a></li>
                <li><a href="#">Gift Cards</a></li>
                <li><a href="#">Business Travel</a></li>
                <li><a href="#">Guidebooks</a></li>
            </ul>
        </div>
        
        <div class="footer-column">
            <h3>Hosting</h3>
            <ul>
                <li><a href="#">Why Host</a></li>
                <li><a href="#">Hospitality</a></li>
                <li><a href="#">Responsible Hosting</a></li>
                <li><a href="#">Community Center</a></li>
                <li><a href="#">Host an Experience</a></li>
            </ul>
        </div>
        
        <div class="footer-column">
            <h3>Connect With Us</h3>
            <div class="links">
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
                <a href="#"><i class="fab fa-linkedin-in"></i></a>
            </div>
        </div>
    </div>
    
    <div class="copyright">
        <p>&copy; 2023 LuxuryStays, Inc. All rights reserved.</p>
    </div>
</div>
</footer>

<script type="module" src="/js/gsap.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script type="module" src="/js/searchBar.js"></script>


<script>

    document.addEventListener('DOMContentLoaded', () => {
        const msg = document.querySelector('#review-message');
        if (msg) {
            setTimeout(() => {
                msg.style.display = 'none';
            }, 3000);
        }

        // Remove the 'message' query parameter from the URL
        if (window.location.search.includes('message=')) {
            const url = new URL(window.location);
            url.searchParams.delete('message');
            window.history.replaceState({}, document.title, url.pathname);
        }
    });

    // Form validation
    (() => {
        'use strict';
        const forms = document.querySelectorAll('.needs-validation');
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });
    })();

    // Chat functionality
    const messagesContainer = document.getElementById('messages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const clearChatButton = document.getElementById('clearChat');

    function appendMessage(text, sender) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', sender);
        messageElement.textContent = text;
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    function sendMessage(message) {
        let sessionId = localStorage.getItem('dialogflowSessionId');
        if (!sessionId) {
            sessionId = generateUUID();
            localStorage.setItem('dialogflowSessionId', sessionId);
        }

        fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: message, sessionId: sessionId }),
        })
            .then(response => response.json())
            .then(data => {
                appendMessage(data.reply, 'bot');
            })
            .catch(error => {
                console.error('Error sending message:', error);
                appendMessage('Error connecting to the server.', 'bot');
            });
    }

    function clearChat() {
        messagesContainer.innerHTML = '';
        localStorage.removeItem('dialogflowSessionId');
        appendMessage("Hello! How can I help you today?", 'bot');
    }

    if (sendButton && messageInput) {
        sendButton.addEventListener('click', () => {
            const userMessage = messageInput.value.trim();
            if (!userMessage) return;

            appendMessage(userMessage, 'user');
            messageInput.value = '';
            sendMessage(userMessage);
        });

        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                const userMessage = messageInput.value.trim();
                if (!userMessage) return;

                appendMessage(userMessage, 'user');
                messageInput.value = '';
                sendMessage(userMessage);
            }
        });
    }

    if (clearChatButton) {
        clearChatButton.addEventListener('click', clearChat);
    }

    function initializeChat() {
        if (messagesContainer && messagesContainer.children.length === 0) {
            appendMessage("Hello! How can I help you today?", 'bot');
        }
    }




    window.onload = initializeChat;
</script>